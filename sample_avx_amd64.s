//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT ·_sample_sum_avx(SB), $0-24

	MOVQ addr+0(FP), DI
	MOVQ len+8(FP), SI

	WORD $0xc031                           // xor    eax, eax
	WORD $0x8548; BYTE $0xf6               // test    rsi, rsi
	JLE  LBB0_12
	LONG $0xf70c8d48                       // lea    rcx, [rdi + 8*rsi]
	LONG $0x08478d48                       // lea    rax, [rdi + 8]
	WORD $0x3948; BYTE $0xc1               // cmp    rcx, rax
	LONG $0xc1470f48                       // cmova    rax, rcx
	WORD $0x8948; BYTE $0xfa               // mov    rdx, rdi
	WORD $0xf748; BYTE $0xd2               // not    rdx
	WORD $0x0148; BYTE $0xc2               // add    rdx, rax
	LONG $0x03eac148                       // shr    rdx, 3
	WORD $0xff48; BYTE $0xc2               // inc    rdx
	WORD $0xc031                           // xor    eax, eax
	LONG $0x08fa8348                       // cmp    rdx, 8
	JB   LBB0_11
	QUAD $0xfffffffffff8b949; WORD $0x3fff // mov    r9, 4611686018427387896
	WORD $0xc031                           // xor    eax, eax
	WORD $0x2149; BYTE $0xd1               // and    r9, rdx
	JE   LBB0_11
	LONG $0xf8718d49                       // lea    rsi, [r9 - 8]
	WORD $0x8948; BYTE $0xf0               // mov    rax, rsi
	LONG $0x03e8c148                       // shr    rax, 3
	WORD $0x3145; BYTE $0xc0               // xor    r8d, r8d
	LONG $0xe6ba0f48; BYTE $0x03           // bt    rsi, 3
	JB   LBB0_4
	LONG $0x076ffac5                       // vmovdqu    xmm0, oword [rdi]
	LONG $0x4f6ffac5; BYTE $0x10           // vmovdqu    xmm1, oword [rdi + 16]
	LONG $0x576ffac5; BYTE $0x20           // vmovdqu    xmm2, oword [rdi + 32]
	LONG $0x5f6ffac5; BYTE $0x30           // vmovdqu    xmm3, oword [rdi + 48]
	LONG $0x0008b841; WORD $0x0000         // mov    r8d, 8
	JMP  LBB0_6

LBB0_4:
	LONG $0xc0eff9c5 // vpxor    xmm0, xmm0, xmm0
	LONG $0xc9eff1c5 // vpxor    xmm1, xmm1, xmm1
	LONG $0xd2efe9c5 // vpxor    xmm2, xmm2, xmm2
	LONG $0xdbefe1c5 // vpxor    xmm3, xmm3, xmm3

LBB0_6:
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB0_9
	WORD $0x894c; BYTE $0xc8     // mov    rax, r9
	WORD $0x294c; BYTE $0xc0     // sub    rax, r8
	LONG $0xc7748d4a; BYTE $0x70 // lea    rsi, [rdi + 8*r8 + 112]

LBB0_8:
	LONG $0x46d4f9c5; BYTE $0x90 // vpaddq    xmm0, xmm0, oword [rsi - 112]
	LONG $0x4ed4f1c5; BYTE $0xa0 // vpaddq    xmm1, xmm1, oword [rsi - 96]
	LONG $0x56d4e9c5; BYTE $0xb0 // vpaddq    xmm2, xmm2, oword [rsi - 80]
	LONG $0x5ed4e1c5; BYTE $0xc0 // vpaddq    xmm3, xmm3, oword [rsi - 64]
	LONG $0x46d4f9c5; BYTE $0xd0 // vpaddq    xmm0, xmm0, oword [rsi - 48]
	LONG $0x4ed4f1c5; BYTE $0xe0 // vpaddq    xmm1, xmm1, oword [rsi - 32]
	LONG $0x56d4e9c5; BYTE $0xf0 // vpaddq    xmm2, xmm2, oword [rsi - 16]
	LONG $0x1ed4e1c5             // vpaddq    xmm3, xmm3, oword [rsi]
	LONG $0x80ee8348             // sub    rsi, -128
	LONG $0xf0c08348             // add    rax, -16
	JNE  LBB0_8

LBB0_9:
	LONG $0xc0d4f1c5             // vpaddq    xmm0, xmm1, xmm0
	LONG $0xc0d4e9c5             // vpaddq    xmm0, xmm2, xmm0
	LONG $0xc0d4e1c5             // vpaddq    xmm0, xmm3, xmm0
	LONG $0xc870f9c5; BYTE $0x4e // vpshufd    xmm1, xmm0, 78
	LONG $0xc1d4f9c5             // vpaddq    xmm0, xmm0, xmm1
	LONG $0x7ef9e1c4; BYTE $0xc0 // vmovq    rax, xmm0
	WORD $0x394c; BYTE $0xca     // cmp    rdx, r9
	JE   LBB0_12
	LONG $0xcf3c8d4a             // lea    rdi, [rdi + 8*r9]

LBB0_11:
	WORD $0x0348; BYTE $0x07 // add    rax, qword [rdi]
	LONG $0x08c78348         // add    rdi, 8
	WORD $0x3948; BYTE $0xcf // cmp    rdi, rcx
	JB   LBB0_11

LBB0_12:
	MOVQ AX, x+16(FP)
	RET

DATA LCDATA1<>+0x000(SB)/8, $0x8000000000000000
DATA LCDATA1<>+0x008(SB)/8, $0x8000000000000000
GLOBL LCDATA1<>(SB), 8, $16

TEXT ·_sample_max_avx(SB), $0-24

	MOVQ addr+0(FP), DI
	MOVQ len+8(FP), SI
	LEAQ LCDATA1<>(SB), BP

	WORD $0xc031                           // xor    eax, eax
	WORD $0x8548; BYTE $0xf6               // test    rsi, rsi
	JE   LBB1_13
	QUAD $0x000000000000b848; WORD $0x8000 // mov    rax, -9223372036854775808
	JLE  LBB1_13
	LONG $0xf70c8d48                       // lea    rcx, [rdi + 8*rsi]
	LONG $0x08778d48                       // lea    rsi, [rdi + 8]
	WORD $0x3948; BYTE $0xf1               // cmp    rcx, rsi
	LONG $0xf1470f48                       // cmova    rsi, rcx
	WORD $0x8948; BYTE $0xfa               // mov    rdx, rdi
	WORD $0xf748; BYTE $0xd2               // not    rdx
	WORD $0x0148; BYTE $0xf2               // add    rdx, rsi
	LONG $0x03eac148                       // shr    rdx, 3
	WORD $0xff48; BYTE $0xc2               // inc    rdx
	LONG $0x08fa8348                       // cmp    rdx, 8
	JB   LBB1_12
	QUAD $0xfffffffffff8b849; WORD $0x3fff // mov    r8, 4611686018427387896
	WORD $0x2149; BYTE $0xd0               // and    r8, rdx
	JE   LBB1_12
	LONG $0xf8408d49                       // lea    rax, [r8 - 8]
	WORD $0x8948; BYTE $0xc6               // mov    rsi, rax
	LONG $0x03eec148                       // shr    rsi, 3
	WORD $0x3145; BYTE $0xc9               // xor    r9d, r9d
	LONG $0xe0ba0f48; BYTE $0x03           // bt    rax, 3
	JB   LBB1_5
	LONG $0x076f7ac5                       // vmovdqu    xmm8, oword [rdi]
	LONG $0x5f6f7ac5; BYTE $0x10           // vmovdqu    xmm11, oword [rdi + 16]
	LONG $0x576f7ac5; BYTE $0x20           // vmovdqu    xmm10, oword [rdi + 32]
	LONG $0x4f6f7ac5; BYTE $0x30           // vmovdqu    xmm9, oword [rdi + 48]
	LONG $0x0008b941; WORD $0x0000         // mov    r9d, 8
	JMP  LBB1_7

LBB1_5:
	LONG $0x456f79c5; BYTE $0x00 // vmovdqa    xmm8, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x6f7941c4; BYTE $0xd8 // vmovdqa    xmm11, xmm8
	LONG $0x6f7941c4; BYTE $0xd0 // vmovdqa    xmm10, xmm8
	LONG $0x6f7941c4; BYTE $0xc8 // vmovdqa    xmm9, xmm8

LBB1_7:
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_10
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	WORD $0x294c; BYTE $0xc8     // sub    rax, r9
	LONG $0xcf748d4a; BYTE $0x70 // lea    rsi, [rdi + 8*r9 + 112]

LBB1_9:
	LONG $0x666ffac5; BYTE $0x90   // vmovdqu    xmm4, oword [rsi - 112]
	LONG $0x6e6ffac5; BYTE $0xa0   // vmovdqu    xmm5, oword [rsi - 96]
	LONG $0x766ffac5; BYTE $0xb0   // vmovdqu    xmm6, oword [rsi - 80]
	LONG $0x7e6ffac5; BYTE $0xc0   // vmovdqu    xmm7, oword [rsi - 64]
	LONG $0x3759c2c4; BYTE $0xc0   // vpcmpgtq    xmm0, xmm4, xmm8
	LONG $0x3751c2c4; BYTE $0xcb   // vpcmpgtq    xmm1, xmm5, xmm11
	LONG $0x3749c2c4; BYTE $0xd2   // vpcmpgtq    xmm2, xmm6, xmm10
	LONG $0x3741c2c4; BYTE $0xd9   // vpcmpgtq    xmm3, xmm7, xmm9
	LONG $0x4b39e3c4; WORD $0x00c4 // vblendvpd    xmm0, xmm8, xmm4, xmm0
	LONG $0x4b21e3c4; WORD $0x10cd // vblendvpd    xmm1, xmm11, xmm5, xmm1
	LONG $0x4b29e3c4; WORD $0x20d6 // vblendvpd    xmm2, xmm10, xmm6, xmm2
	LONG $0x4b31e3c4; WORD $0x30df // vblendvpd    xmm3, xmm9, xmm7, xmm3
	LONG $0x666ffac5; BYTE $0xd0   // vmovdqu    xmm4, oword [rsi - 48]
	LONG $0x6e6ffac5; BYTE $0xe0   // vmovdqu    xmm5, oword [rsi - 32]
	LONG $0x766ffac5; BYTE $0xf0   // vmovdqu    xmm6, oword [rsi - 16]
	LONG $0x3e6ffac5               // vmovdqu    xmm7, oword [rsi]
	LONG $0x375962c4; BYTE $0xc0   // vpcmpgtq    xmm8, xmm4, xmm0
	LONG $0x375162c4; BYTE $0xc9   // vpcmpgtq    xmm9, xmm5, xmm1
	LONG $0x374962c4; BYTE $0xd2   // vpcmpgtq    xmm10, xmm6, xmm2
	LONG $0x374162c4; BYTE $0xe3   // vpcmpgtq    xmm12, xmm7, xmm3
	LONG $0x4b7963c4; WORD $0x80c4 // vblendvpd    xmm8, xmm0, xmm4, xmm8
	LONG $0x4b7163c4; WORD $0x90dd // vblendvpd    xmm11, xmm1, xmm5, xmm9
	LONG $0x4b6963c4; WORD $0xa0d6 // vblendvpd    xmm10, xmm2, xmm6, xmm10
	LONG $0x4b6163c4; WORD $0xc0cf // vblendvpd    xmm9, xmm3, xmm7, xmm12
	LONG $0x80ee8348               // sub    rsi, -128
	LONG $0xf0c08348               // add    rax, -16
	JNE  LBB1_9

LBB1_10:
	LONG $0x3739c2c4; BYTE $0xc3   // vpcmpgtq    xmm0, xmm8, xmm11
	LONG $0x4b21c3c4; WORD $0x00c0 // vblendvpd    xmm0, xmm11, xmm8, xmm0
	LONG $0x3779c2c4; BYTE $0xca   // vpcmpgtq    xmm1, xmm0, xmm10
	LONG $0x4b29e3c4; WORD $0x10c0 // vblendvpd    xmm0, xmm10, xmm0, xmm1
	LONG $0x3779c2c4; BYTE $0xc9   // vpcmpgtq    xmm1, xmm0, xmm9
	LONG $0x4b31e3c4; WORD $0x10c0 // vblendvpd    xmm0, xmm9, xmm0, xmm1
	LONG $0xc870f9c5; BYTE $0x4e   // vpshufd    xmm1, xmm0, 78
	LONG $0x3779e2c4; BYTE $0xc9   // vpcmpgtq    xmm1, xmm0, xmm1
	LONG $0x1479e3c4; WORD $0x00ce // vpextrb    esi, xmm1, 0
	LONG $0x7ef9c1c4; BYTE $0xc1   // vmovq    r9, xmm0
	LONG $0x16f9e3c4; WORD $0x01c0 // vpextrq    rax, xmm0, 1
	LONG $0x01c6f640               // test    sil, 1
	LONG $0xc1450f49               // cmovne    rax, r9
	WORD $0x394c; BYTE $0xc2       // cmp    rdx, r8
	JE   LBB1_13
	LONG $0xc73c8d4a               // lea    rdi, [rdi + 8*r8]

LBB1_12:
	WORD $0x8b48; BYTE $0x17 // mov    rdx, qword [rdi]
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	LONG $0xc24d0f48         // cmovge    rax, rdx
	LONG $0x08c78348         // add    rdi, 8
	WORD $0x3948; BYTE $0xcf // cmp    rdi, rcx
	JB   LBB1_12

LBB1_13:
	MOVQ AX, x+16(FP)
	RET

DATA LCDATA2<>+0x000(SB)/8, $0x7fffffffffffffff
DATA LCDATA2<>+0x008(SB)/8, $0x7fffffffffffffff
GLOBL LCDATA2<>(SB), 8, $16

TEXT ·_sample_min_avx(SB), $0-24

	MOVQ addr+0(FP), DI
	MOVQ len+8(FP), SI
	LEAQ LCDATA2<>(SB), BP

	WORD $0xc031                           // xor    eax, eax
	WORD $0x8548; BYTE $0xf6               // test    rsi, rsi
	JE   LBB2_13
	QUAD $0xffffffffffffb848; WORD $0x7fff // mov    rax, 9223372036854775807
	JLE  LBB2_13
	LONG $0xf70c8d48                       // lea    rcx, [rdi + 8*rsi]
	LONG $0x08778d48                       // lea    rsi, [rdi + 8]
	WORD $0x3948; BYTE $0xf1               // cmp    rcx, rsi
	LONG $0xf1470f48                       // cmova    rsi, rcx
	WORD $0x8948; BYTE $0xfa               // mov    rdx, rdi
	WORD $0xf748; BYTE $0xd2               // not    rdx
	WORD $0x0148; BYTE $0xf2               // add    rdx, rsi
	LONG $0x03eac148                       // shr    rdx, 3
	WORD $0xff48; BYTE $0xc2               // inc    rdx
	LONG $0x08fa8348                       // cmp    rdx, 8
	JB   LBB2_12
	QUAD $0xfffffffffff8b849; WORD $0x3fff // mov    r8, 4611686018427387896
	WORD $0x2149; BYTE $0xd0               // and    r8, rdx
	JE   LBB2_12
	LONG $0xf8408d49                       // lea    rax, [r8 - 8]
	WORD $0x8948; BYTE $0xc6               // mov    rsi, rax
	LONG $0x03eec148                       // shr    rsi, 3
	WORD $0x3145; BYTE $0xc9               // xor    r9d, r9d
	LONG $0xe0ba0f48; BYTE $0x03           // bt    rax, 3
	JB   LBB2_5
	LONG $0x076f7ac5                       // vmovdqu    xmm8, oword [rdi]
	LONG $0x5f6f7ac5; BYTE $0x10           // vmovdqu    xmm11, oword [rdi + 16]
	LONG $0x576f7ac5; BYTE $0x20           // vmovdqu    xmm10, oword [rdi + 32]
	LONG $0x4f6f7ac5; BYTE $0x30           // vmovdqu    xmm9, oword [rdi + 48]
	LONG $0x0008b941; WORD $0x0000         // mov    r9d, 8
	JMP  LBB2_7

LBB2_5:
	LONG $0x456f79c5; BYTE $0x00 // vmovdqa    xmm8, oword 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0x6f7941c4; BYTE $0xd8 // vmovdqa    xmm11, xmm8
	LONG $0x6f7941c4; BYTE $0xd0 // vmovdqa    xmm10, xmm8
	LONG $0x6f7941c4; BYTE $0xc8 // vmovdqa    xmm9, xmm8

LBB2_7:
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_10
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	WORD $0x294c; BYTE $0xc8     // sub    rax, r9
	LONG $0xcf748d4a; BYTE $0x70 // lea    rsi, [rdi + 8*r9 + 112]

LBB2_9:
	LONG $0x666ffac5; BYTE $0x90   // vmovdqu    xmm4, oword [rsi - 112]
	LONG $0x6e6ffac5; BYTE $0xa0   // vmovdqu    xmm5, oword [rsi - 96]
	LONG $0x766ffac5; BYTE $0xb0   // vmovdqu    xmm6, oword [rsi - 80]
	LONG $0x7e6ffac5; BYTE $0xc0   // vmovdqu    xmm7, oword [rsi - 64]
	LONG $0x3739e2c4; BYTE $0xc4   // vpcmpgtq    xmm0, xmm8, xmm4
	LONG $0x3721e2c4; BYTE $0xcd   // vpcmpgtq    xmm1, xmm11, xmm5
	LONG $0x3729e2c4; BYTE $0xd6   // vpcmpgtq    xmm2, xmm10, xmm6
	LONG $0x3731e2c4; BYTE $0xdf   // vpcmpgtq    xmm3, xmm9, xmm7
	LONG $0x4b39e3c4; WORD $0x00c4 // vblendvpd    xmm0, xmm8, xmm4, xmm0
	LONG $0x4b21e3c4; WORD $0x10cd // vblendvpd    xmm1, xmm11, xmm5, xmm1
	LONG $0x4b29e3c4; WORD $0x20d6 // vblendvpd    xmm2, xmm10, xmm6, xmm2
	LONG $0x4b31e3c4; WORD $0x30df // vblendvpd    xmm3, xmm9, xmm7, xmm3
	LONG $0x666ffac5; BYTE $0xd0   // vmovdqu    xmm4, oword [rsi - 48]
	LONG $0x6e6ffac5; BYTE $0xe0   // vmovdqu    xmm5, oword [rsi - 32]
	LONG $0x766ffac5; BYTE $0xf0   // vmovdqu    xmm6, oword [rsi - 16]
	LONG $0x3e6ffac5               // vmovdqu    xmm7, oword [rsi]
	LONG $0x377962c4; BYTE $0xc4   // vpcmpgtq    xmm8, xmm0, xmm4
	LONG $0x377162c4; BYTE $0xcd   // vpcmpgtq    xmm9, xmm1, xmm5
	LONG $0x376962c4; BYTE $0xd6   // vpcmpgtq    xmm10, xmm2, xmm6
	LONG $0x376162c4; BYTE $0xe7   // vpcmpgtq    xmm12, xmm3, xmm7
	LONG $0x4b7963c4; WORD $0x80c4 // vblendvpd    xmm8, xmm0, xmm4, xmm8
	LONG $0x4b7163c4; WORD $0x90dd // vblendvpd    xmm11, xmm1, xmm5, xmm9
	LONG $0x4b6963c4; WORD $0xa0d6 // vblendvpd    xmm10, xmm2, xmm6, xmm10
	LONG $0x4b6163c4; WORD $0xc0cf // vblendvpd    xmm9, xmm3, xmm7, xmm12
	LONG $0x80ee8348               // sub    rsi, -128
	LONG $0xf0c08348               // add    rax, -16
	JNE  LBB2_9

LBB2_10:
	LONG $0x3721c2c4; BYTE $0xc0   // vpcmpgtq    xmm0, xmm11, xmm8
	LONG $0x4b21c3c4; WORD $0x00c0 // vblendvpd    xmm0, xmm11, xmm8, xmm0
	LONG $0x3729e2c4; BYTE $0xc8   // vpcmpgtq    xmm1, xmm10, xmm0
	LONG $0x4b29e3c4; WORD $0x10c0 // vblendvpd    xmm0, xmm10, xmm0, xmm1
	LONG $0x3731e2c4; BYTE $0xc8   // vpcmpgtq    xmm1, xmm9, xmm0
	LONG $0x4b31e3c4; WORD $0x10c0 // vblendvpd    xmm0, xmm9, xmm0, xmm1
	LONG $0xc870f9c5; BYTE $0x4e   // vpshufd    xmm1, xmm0, 78
	LONG $0x3771e2c4; BYTE $0xc8   // vpcmpgtq    xmm1, xmm1, xmm0
	LONG $0x1479e3c4; WORD $0x00ce // vpextrb    esi, xmm1, 0
	LONG $0x7ef9c1c4; BYTE $0xc1   // vmovq    r9, xmm0
	LONG $0x16f9e3c4; WORD $0x01c0 // vpextrq    rax, xmm0, 1
	LONG $0x01c6f640               // test    sil, 1
	LONG $0xc1450f49               // cmovne    rax, r9
	WORD $0x394c; BYTE $0xc2       // cmp    rdx, r8
	JE   LBB2_13
	LONG $0xc73c8d4a               // lea    rdi, [rdi + 8*r8]

LBB2_12:
	WORD $0x8b48; BYTE $0x17 // mov    rdx, qword [rdi]
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	LONG $0xc24e0f48         // cmovle    rax, rdx
	LONG $0x08c78348         // add    rdi, 8
	WORD $0x3948; BYTE $0xcf // cmp    rdi, rcx
	JB   LBB2_12

LBB2_13:
	MOVQ AX, x+16(FP)
	RET
