//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT ·_sample_sum_sse4_2(SB), $0-24

	MOVQ addr+0(FP), DI
	MOVQ len+8(FP), SI

	WORD $0xc031                           // xor    eax, eax
	WORD $0x8548; BYTE $0xf6               // test    rsi, rsi
	JLE  LBB0_13
	LONG $0xf70c8d48                       // lea    rcx, [rdi + 8*rsi]
	LONG $0x08478d48                       // lea    rax, [rdi + 8]
	WORD $0x3948; BYTE $0xc1               // cmp    rcx, rax
	LONG $0xc1470f48                       // cmova    rax, rcx
	WORD $0x8948; BYTE $0xfe               // mov    rsi, rdi
	WORD $0xf748; BYTE $0xd6               // not    rsi
	WORD $0x0148; BYTE $0xc6               // add    rsi, rax
	WORD $0x8949; BYTE $0xf2               // mov    r10, rsi
	LONG $0x03eac149                       // shr    r10, 3
	WORD $0xff49; BYTE $0xc2               // inc    r10
	WORD $0xc031                           // xor    eax, eax
	LONG $0x04fa8349                       // cmp    r10, 4
	JB   LBB0_12
	QUAD $0xfffffffffffcb849; WORD $0x3fff // mov    r8, 4611686018427387900
	WORD $0xc031                           // xor    eax, eax
	WORD $0x214d; BYTE $0xd0               // and    r8, r10
	JE   LBB0_12
	LONG $0xfc488d4d                       // lea    r9, [r8 - 4]
	WORD $0x8944; BYTE $0xca               // mov    edx, r9d
	WORD $0xeac1; BYTE $0x02               // shr    edx, 2
	WORD $0xc2ff                           // inc    edx
	WORD $0xc031                           // xor    eax, eax
	WORD $0xc2f6; BYTE $0x03               // test    dl, 3
	JE   LBB0_4
	WORD $0xeec1; BYTE $0x03               // shr    esi, 3
	WORD $0xc6ff                           // inc    esi
	WORD $0xe683; BYTE $0x0c               // and    esi, 12
	WORD $0xc683; BYTE $0xfc               // add    esi, -4
	WORD $0xeec1; BYTE $0x02               // shr    esi, 2
	WORD $0xc6ff                           // inc    esi
	WORD $0xe683; BYTE $0x03               // and    esi, 3
	WORD $0xf748; BYTE $0xde               // neg    rsi
	LONG $0xc0ef0f66                       // pxor    xmm0, xmm0
	WORD $0xc031                           // xor    eax, eax
	LONG $0xc9ef0f66                       // pxor    xmm1, xmm1

LBB0_6:
	LONG $0x146f0ff3; BYTE $0xc7   // movdqu    xmm2, oword [rdi + 8*rax]
	LONG $0x5c6f0ff3; WORD $0x10c7 // movdqu    xmm3, oword [rdi + 8*rax + 16]
	LONG $0xc2d40f66               // paddq    xmm0, xmm2
	LONG $0xcbd40f66               // paddq    xmm1, xmm3
	LONG $0x04c08348               // add    rax, 4
	WORD $0xff48; BYTE $0xc6       // inc    rsi
	JNE  LBB0_6
	JMP  LBB0_7

LBB0_4:
	LONG $0xc0ef0f66 // pxor    xmm0, xmm0
	LONG $0xc9ef0f66 // pxor    xmm1, xmm1

LBB0_7:
	LONG $0x0cf98349             // cmp    r9, 12
	JB   LBB0_10
	WORD $0x894c; BYTE $0xc6     // mov    rsi, r8
	WORD $0x2948; BYTE $0xc6     // sub    rsi, rax
	LONG $0xc7448d48; BYTE $0x70 // lea    rax, [rdi + 8*rax + 112]

LBB0_9:
	LONG $0x506f0ff3; BYTE $0x90 // movdqu    xmm2, oword [rax - 112]
	LONG $0x586f0ff3; BYTE $0xa0 // movdqu    xmm3, oword [rax - 96]
	LONG $0x606f0ff3; BYTE $0xb0 // movdqu    xmm4, oword [rax - 80]
	LONG $0x686f0ff3; BYTE $0xc0 // movdqu    xmm5, oword [rax - 64]
	LONG $0xd0d40f66             // paddq    xmm2, xmm0
	LONG $0xd9d40f66             // paddq    xmm3, xmm1
	LONG $0xd4d40f66             // paddq    xmm2, xmm4
	LONG $0xddd40f66             // paddq    xmm3, xmm5
	LONG $0x606f0ff3; BYTE $0xd0 // movdqu    xmm4, oword [rax - 48]
	LONG $0x686f0ff3; BYTE $0xe0 // movdqu    xmm5, oword [rax - 32]
	LONG $0xe2d40f66             // paddq    xmm4, xmm2
	LONG $0xebd40f66             // paddq    xmm5, xmm3
	LONG $0x406f0ff3; BYTE $0xf0 // movdqu    xmm0, oword [rax - 16]
	LONG $0x086f0ff3             // movdqu    xmm1, oword [rax]
	LONG $0xc4d40f66             // paddq    xmm0, xmm4
	LONG $0xcdd40f66             // paddq    xmm1, xmm5
	LONG $0x80e88348             // sub    rax, -128
	LONG $0xf0c68348             // add    rsi, -16
	JNE  LBB0_9

LBB0_10:
	LONG $0xc8d40f66             // paddq    xmm1, xmm0
	LONG $0xc1700f66; BYTE $0x4e // pshufd    xmm0, xmm1, 78
	LONG $0xc1d40f66             // paddq    xmm0, xmm1
	LONG $0x7e0f4866; BYTE $0xc0 // movq    rax, xmm0
	WORD $0x394d; BYTE $0xc2     // cmp    r10, r8
	JE   LBB0_13
	LONG $0xc73c8d4a             // lea    rdi, [rdi + 8*r8]

LBB0_12:
	WORD $0x0348; BYTE $0x07 // add    rax, qword [rdi]
	LONG $0x08c78348         // add    rdi, 8
	WORD $0x3948; BYTE $0xcf // cmp    rdi, rcx
	JB   LBB0_12

LBB0_13:
	MOVQ AX, x+16(FP)
	RET

DATA LCDATA1<>+0x000(SB)/8, $0x8000000000000000
DATA LCDATA1<>+0x008(SB)/8, $0x8000000000000000
GLOBL LCDATA1<>(SB), 8, $16

TEXT ·_sample_max_sse4_2(SB), $0-24

	MOVQ addr+0(FP), DI
	MOVQ len+8(FP), SI
	LEAQ LCDATA1<>(SB), BP

	WORD $0xc031                           // xor    eax, eax
	WORD $0x8548; BYTE $0xf6               // test    rsi, rsi
	JE   LBB1_13
	QUAD $0x000000000000b848; WORD $0x8000 // mov    rax, -9223372036854775808
	JLE  LBB1_13
	LONG $0xf70c8d48                       // lea    rcx, [rdi + 8*rsi]
	LONG $0x08778d48                       // lea    rsi, [rdi + 8]
	WORD $0x3948; BYTE $0xf1               // cmp    rcx, rsi
	LONG $0xf1470f48                       // cmova    rsi, rcx
	WORD $0x8948; BYTE $0xfa               // mov    rdx, rdi
	WORD $0xf748; BYTE $0xd2               // not    rdx
	WORD $0x0148; BYTE $0xf2               // add    rdx, rsi
	LONG $0x03eac148                       // shr    rdx, 3
	WORD $0xff48; BYTE $0xc2               // inc    rdx
	LONG $0x04fa8348                       // cmp    rdx, 4
	JB   LBB1_12
	QUAD $0xfffffffffffcb849; WORD $0x3fff // mov    r8, 4611686018427387900
	WORD $0x2149; BYTE $0xd0               // and    r8, rdx
	JE   LBB1_12
	LONG $0xfc408d49                       // lea    rax, [r8 - 4]
	WORD $0x8948; BYTE $0xc6               // mov    rsi, rax
	LONG $0x02eec148                       // shr    rsi, 2
	WORD $0x3145; BYTE $0xc9               // xor    r9d, r9d
	LONG $0xe0ba0f48; BYTE $0x02           // bt    rax, 2
	JB   LBB1_5
	LONG $0x1f6f0ff3                       // movdqu    xmm3, oword [rdi]
	LONG $0x576f0ff3; BYTE $0x10           // movdqu    xmm2, oword [rdi + 16]
	LONG $0x0004b941; WORD $0x0000         // mov    r9d, 4
	JMP  LBB1_7

LBB1_5:
	LONG $0x5d6f0f66; BYTE $0x00 // movdqa    xmm3, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0xd36f0f66             // movdqa    xmm2, xmm3

LBB1_7:
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_10
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	WORD $0x294c; BYTE $0xc8     // sub    rax, r9
	LONG $0xcf748d4a; BYTE $0x30 // lea    rsi, [rdi + 8*r9 + 48]

LBB1_9:
	LONG $0x666f0ff3; BYTE $0xd0 // movdqu    xmm4, oword [rsi - 48]
	LONG $0x6e6f0ff3; BYTE $0xe0 // movdqu    xmm5, oword [rsi - 32]
	LONG $0x766f0ff3; BYTE $0xf0 // movdqu    xmm6, oword [rsi - 16]
	LONG $0x3e6f0ff3             // movdqu    xmm7, oword [rsi]
	LONG $0xc46f0f66             // movdqa    xmm0, xmm4
	LONG $0x37380f66; BYTE $0xc3 // pcmpgtq    xmm0, xmm3
	LONG $0xcd6f0f66             // movdqa    xmm1, xmm5
	LONG $0x37380f66; BYTE $0xca // pcmpgtq    xmm1, xmm2
	LONG $0x15380f66; BYTE $0xdc // blendvpd    xmm3, xmm4
	LONG $0xc16f0f66             // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xd5 // blendvpd    xmm2, xmm5
	LONG $0xc66f0f66             // movdqa    xmm0, xmm6
	LONG $0x37380f66; BYTE $0xc3 // pcmpgtq    xmm0, xmm3
	LONG $0xcf6f0f66             // movdqa    xmm1, xmm7
	LONG $0x37380f66; BYTE $0xca // pcmpgtq    xmm1, xmm2
	LONG $0x15380f66; BYTE $0xde // blendvpd    xmm3, xmm6
	LONG $0xc16f0f66             // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xd7 // blendvpd    xmm2, xmm7
	LONG $0x40c68348             // add    rsi, 64
	LONG $0xf8c08348             // add    rax, -8
	JNE  LBB1_9

LBB1_10:
	LONG $0xc36f0f66                           // movdqa    xmm0, xmm3
	LONG $0x37380f66; BYTE $0xc2               // pcmpgtq    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3
	LONG $0xc2700f66; BYTE $0x4e               // pshufd    xmm0, xmm2, 78
	LONG $0xca6f0f66                           // movdqa    xmm1, xmm2
	LONG $0x37380f66; BYTE $0xc8               // pcmpgtq    xmm1, xmm0
	LONG $0x143a0f66; WORD $0x00ce             // pextrb    esi, xmm1, 0
	LONG $0x7e0f4966; BYTE $0xd1               // movq    r9, xmm2
	LONG $0x3a0f4866; WORD $0xd016; BYTE $0x01 // pextrq    rax, xmm2, 1
	LONG $0x01c6f640                           // test    sil, 1
	LONG $0xc1450f49                           // cmovne    rax, r9
	WORD $0x394c; BYTE $0xc2                   // cmp    rdx, r8
	JE   LBB1_13
	LONG $0xc73c8d4a                           // lea    rdi, [rdi + 8*r8]

LBB1_12:
	WORD $0x8b48; BYTE $0x17 // mov    rdx, qword [rdi]
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	LONG $0xc24d0f48         // cmovge    rax, rdx
	LONG $0x08c78348         // add    rdi, 8
	WORD $0x3948; BYTE $0xcf // cmp    rdi, rcx
	JB   LBB1_12

LBB1_13:
	MOVQ AX, x+16(FP)
	RET

DATA LCDATA2<>+0x000(SB)/8, $0x7fffffffffffffff
DATA LCDATA2<>+0x008(SB)/8, $0x7fffffffffffffff
GLOBL LCDATA2<>(SB), 8, $16

TEXT ·_sample_min_sse4_2(SB), $0-24

	MOVQ addr+0(FP), DI
	MOVQ len+8(FP), SI
	LEAQ LCDATA2<>(SB), BP

	WORD $0xc031                           // xor    eax, eax
	WORD $0x8548; BYTE $0xf6               // test    rsi, rsi
	JE   LBB2_13
	QUAD $0xffffffffffffb848; WORD $0x7fff // mov    rax, 9223372036854775807
	JLE  LBB2_13
	LONG $0xf70c8d48                       // lea    rcx, [rdi + 8*rsi]
	LONG $0x08778d48                       // lea    rsi, [rdi + 8]
	WORD $0x3948; BYTE $0xf1               // cmp    rcx, rsi
	LONG $0xf1470f48                       // cmova    rsi, rcx
	WORD $0x8948; BYTE $0xfa               // mov    rdx, rdi
	WORD $0xf748; BYTE $0xd2               // not    rdx
	WORD $0x0148; BYTE $0xf2               // add    rdx, rsi
	LONG $0x03eac148                       // shr    rdx, 3
	WORD $0xff48; BYTE $0xc2               // inc    rdx
	LONG $0x04fa8348                       // cmp    rdx, 4
	JB   LBB2_12
	QUAD $0xfffffffffffcb849; WORD $0x3fff // mov    r8, 4611686018427387900
	WORD $0x2149; BYTE $0xd0               // and    r8, rdx
	JE   LBB2_12
	LONG $0xfc408d49                       // lea    rax, [r8 - 4]
	WORD $0x8948; BYTE $0xc6               // mov    rsi, rax
	LONG $0x02eec148                       // shr    rsi, 2
	WORD $0x3145; BYTE $0xc9               // xor    r9d, r9d
	LONG $0xe0ba0f48; BYTE $0x02           // bt    rax, 2
	JB   LBB2_5
	LONG $0x1f6f0ff3                       // movdqu    xmm3, oword [rdi]
	LONG $0x576f0ff3; BYTE $0x10           // movdqu    xmm2, oword [rdi + 16]
	LONG $0x0004b941; WORD $0x0000         // mov    r9d, 4
	JMP  LBB2_7

LBB2_5:
	LONG $0x5d6f0f66; BYTE $0x00 // movdqa    xmm3, oword 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0xd36f0f66             // movdqa    xmm2, xmm3

LBB2_7:
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_10
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	WORD $0x294c; BYTE $0xc8     // sub    rax, r9
	LONG $0xcf748d4a; BYTE $0x30 // lea    rsi, [rdi + 8*r9 + 48]

LBB2_9:
	LONG $0x666f0ff3; BYTE $0xd0 // movdqu    xmm4, oword [rsi - 48]
	LONG $0x6e6f0ff3; BYTE $0xe0 // movdqu    xmm5, oword [rsi - 32]
	LONG $0x766f0ff3; BYTE $0xf0 // movdqu    xmm6, oword [rsi - 16]
	LONG $0x3e6f0ff3             // movdqu    xmm7, oword [rsi]
	LONG $0xc36f0f66             // movdqa    xmm0, xmm3
	LONG $0x37380f66; BYTE $0xc4 // pcmpgtq    xmm0, xmm4
	LONG $0xca6f0f66             // movdqa    xmm1, xmm2
	LONG $0x37380f66; BYTE $0xcd // pcmpgtq    xmm1, xmm5
	LONG $0x15380f66; BYTE $0xdc // blendvpd    xmm3, xmm4
	LONG $0xc16f0f66             // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xd5 // blendvpd    xmm2, xmm5
	LONG $0xc3280f66             // movapd    xmm0, xmm3
	LONG $0x37380f66; BYTE $0xc6 // pcmpgtq    xmm0, xmm6
	LONG $0xca280f66             // movapd    xmm1, xmm2
	LONG $0x37380f66; BYTE $0xcf // pcmpgtq    xmm1, xmm7
	LONG $0x15380f66; BYTE $0xde // blendvpd    xmm3, xmm6
	LONG $0xc16f0f66             // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xd7 // blendvpd    xmm2, xmm7
	LONG $0x40c68348             // add    rsi, 64
	LONG $0xf8c08348             // add    rax, -8
	JNE  LBB2_9

LBB2_10:
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x37380f66; BYTE $0xc3               // pcmpgtq    xmm0, xmm3
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3
	LONG $0xc2700f66; BYTE $0x4e               // pshufd    xmm0, xmm2, 78
	LONG $0x37380f66; BYTE $0xc2               // pcmpgtq    xmm0, xmm2
	LONG $0x143a0f66; WORD $0x00c6             // pextrb    esi, xmm0, 0
	LONG $0x7e0f4966; BYTE $0xd1               // movq    r9, xmm2
	LONG $0x3a0f4866; WORD $0xd016; BYTE $0x01 // pextrq    rax, xmm2, 1
	LONG $0x01c6f640                           // test    sil, 1
	LONG $0xc1450f49                           // cmovne    rax, r9
	WORD $0x394c; BYTE $0xc2                   // cmp    rdx, r8
	JE   LBB2_13
	LONG $0xc73c8d4a                           // lea    rdi, [rdi + 8*r8]

LBB2_12:
	WORD $0x8b48; BYTE $0x17 // mov    rdx, qword [rdi]
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	LONG $0xc24e0f48         // cmovle    rax, rdx
	LONG $0x08c78348         // add    rdi, 8
	WORD $0x3948; BYTE $0xcf // cmp    rdi, rcx
	JB   LBB2_12

LBB2_13:
	MOVQ AX, x+16(FP)
	RET
